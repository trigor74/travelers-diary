buildscript {
    repositories {
        maven { url 'http://s3.amazonaws.com/fabric-artifacts/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'http://s3.amazonaws.com/fabric-artifacts/public' }
}

apply plugin: 'android-apt'

android {
    signingConfigs {
// release keystore not ready yet
//        release {
//            keyAlias 'release'
//            keyPassword 'keystore-password'
//            storeFile file('../../travelers-diary_release.keystore')
//            storePassword 'keystore-password'
//        }
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../../travelers-diary_debug.keystore')
            storePassword 'android'
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.travelersdiary"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildTypes.each {
        // All keys defined in gradle.properties file
        // Replace all keys with your keys
        it.buildConfigField 'String', 'GOOGLE_API_KEY', GoogleApiKey
        it.buildConfigField 'String', 'GOOGLE_API_SERVER_KEY', GoogleApiServerKey
        it.buildConfigField 'String', 'GOOGLE_ANDROID_CLIENT_ID', GoogleAndroidClientId
        it.buildConfigField 'String', 'FIREBASE_ROOT_URL', FirebaseRootUrl
        it.buildConfigField 'String', 'OPENWEATHERMAP_AIPID', WeatherApiKey
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }

    configurations {
        compile.exclude group: 'stax'
        compile.exclude group: 'xpp3'
    }

    task indexAssets {
        description 'Index Build Variant assets for faster lookup by AssetManager'

        ext.assetsSrcDir = file("${projectDir}/src/main/assets")

        inputs.dir assetsSrcDir

        doLast {
            android.applicationVariants.each { target ->
                // create index
                def contents = ""
                def tree = fileTree(dir: "${ext.assetsSrcDir}", include: ['**/*.ttf'], exclude: ['**/.svn/**', '*.index'])
                // use this instead if you have assets folders in each flavor:
                // def tree = fileTree(dir: "${ext.variantPath}", exclude: ['**/.svn/**', '*.index'])
                tree.visit { fileDetails ->
                    contents += "${fileDetails.relativePath}" + "\n"
                }

                // create index file
                def assetIndexFile = new File("${ext.assetsSrcDir}/assets.index")
                assetIndexFile.write contents
            }
        }
    }

    indexAssets.dependsOn {
        tasks.matching { task -> task.name.startsWith('merge') && task.name.endsWith('Assets') }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn indexAssets
    }

    indexAssets
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:multidex:1.0.1'

    /*Support libs*/
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'

    /*Google services*/
    compile 'com.google.android.gms:play-services-auth:11.0.0'
    compile 'com.google.android.gms:play-services-plus:11.0.0'
    compile 'com.google.android.gms:play-services-maps:11.0.0'
    compile 'com.google.android.gms:play-services-location:11.0.0'
    compile 'com.google.android.gms:play-services-places:11.0.0'

    /*Serialization*/
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.squareup.retrofit2:converter-simplexml:2.0.0-beta4'

    /*Custom views*/
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'com.1gravity:android-rteditor:1.6.2'
    compile 'com.commit451:PhotoView:1.2.4'
    compile 'com.wdullaer:materialdatetimepicker:2.1.1'
    compile 'com.github.markushi:circlebutton:1.1'

    /*Firebase*/
    compile 'com.google.firebase:firebase-appindexing:11.0.0'
    compile 'com.firebase:firebase-client-android:2.5.2'
    compile 'com.google.firebase:firebase-storage:11.0.0'
    compile 'com.firebaseui:firebase-ui:0.3.1'

    /*Others*/
    compile 'com.jakewharton:butterknife:7.0.1'

    compile 'com.squareup:otto:1.3.8'
    apt 'com.squareup:otto:1.3.8'

    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }

    // implementation of LinearLayoutManager which wraps its contents
    compile 'org.solovyev.android.views:linear-layout-manager:0.5@aar'
}

apply plugin: 'com.google.gms.google-services'